conda: "envs/global.yaml"

from snakemake.utils import min_version
min_version("8.20")

import datetime
import re
import os
import pandas as pd

configfile: "config/config.yaml"

metadata_daf = pd.read_csv('resources/gwas/metadata/metadata_all_fields.tsv', sep = '\t')

imd_traits = config.get('igad_paper').get('imd_traits')

max_time = 120

def get_permute_time(wildcards, threads):
    return min(max_time, ((int(wildcards.draws)/100)*3600)/int(threads))

def get_mem_mb(wildcards, threads):
    return 3300 * threads

def get_metadata_field(key, column, key_field = 'abbrv'):
    return metadata_daf[metadata_daf[key_field] == key][column].values[0]

# Gets script path relative to location of Snakefile given by workflow.basedir
def script_path(script):
    return os.path.join(workflow.basedir, "scripts", script)

def env_path(env):
    return os.path.join(workflow.basedir, "envs", env)

include: 'rules/gwas/harmonise_gwas.smk'
include: 'rules/gwas/gwas.smk'
include: 'rules/sumher.smk'
include: 'rules/gwas/iga_meta.smk'
include: 'rules/wildcard_constraints.smk'
include: 'rules/ldsc.smk'
include: 'rules/python/export.py'

#module gwas_pipeline:
#    snakefile: github("twillis209/GWAS_tools", path = "workflow/Snakefile", commit = "37e1724")
#    config: config["GWAS_tools"]
#
## Ugly but this prevents import of redundant 1kGP rules
#use rule fix_alleles_and_id from gwas_pipeline as gwas_tools_fix_alleles_and_id
#use rule check_for_minimal_column_set from gwas_pipeline as gwas_tools_check_for_minimal_column_set
#use rule recalculate_missing_summary_statistics from gwas_pipeline as gwas_tools_recalculate_missing_summary_statistics
#use rule detect_build from gwas_pipeline as gwas_tools_detect_build
#use rule create_bed_file_for_liftover from gwas_pipeline as gwas_tools_create_bed_file_for_liftover
#use rule prepare_file_for_liftover from gwas_pipeline as gwas_tools_prepare_file_for_liftover
#use rule liftover from gwas_pipeline as gwas_tools_liftover
#use rule merge_liftovered_rows_with_summary_statistics from gwas_pipeline as gwas_tools_merge_liftovered_rows_with_summary_statistics
#use rule tabulate_allele_switches_using_1kG from gwas_pipeline as gwas_tools_tabulate_allele_switches_using_1kG
#use rule tabulate_allele_switches_using_hg38_1kG from gwas_pipeline as gwas_tools_tabulate_allele_switches_using_hg38_1kG
#
#use rule align_alleles_to_1kG from gwas_pipeline as gwas_tools_align_alleles_to_1kG with:
#    output:
#        "results/processed_gwas/{input_name}.tsv.gz"
#    params:
#        strand_policy = {'status': 'nonswitched',
#                         'codes_to_retain': ["rev", "revcomp", "comp", "nochange", "ambig"],
#                         'flip': ["rev", "ambig", "revcomp", "comp"]},
#        retentions = lambda w: config.get('GWAS_tools').get('snps_to_retain')

use rule rehead from gwas_pipeline as rehead with:
    input:
        "resources/gwas/{input_name}.tsv.gz"

module kGP_pipeline:
    snakefile: github("twillis209/1kGP_pipeline", path = "workflow/Snakefile", branch = 'conda')
    config: config["GWAS_tools"]['1kGP_pipeline']

use rule * from kGP_pipeline as kGP_*
